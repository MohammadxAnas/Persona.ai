generator client {
   provider = "prisma-client-js"
 }
 
 datasource db {
   provider = "mongodb"
   url      = env("NEXT_PUBLIC_DATABASE_URL")
 }
 
 model User {
   id               String        @id @default(auto()) @map("_id") @db.ObjectId
   name             String
   email            String        @unique
   password         String
   sessionToken     String?
   confirmationCode String
   isVerified       Boolean       @default(false)
   codeExpiresAt    DateTime 
 
   personas          Persona[]      @relation("UserPersonas")
   recentBots      RecentBot[]    @relation("UserRecentBots")
 
   aiCharacters     AICharacter[] @relation("UserAICharacters")
   chatSessions     ChatSession[] @relation("UserChatSessions")
   messages         Message[]     @relation("UserMessages")
 }
 
 model AICharacter {
   id          String   @id @default(auto()) @map("_id") @db.ObjectId
   userId      String   @db.ObjectId
   name        String
   avatar      String?
   description String
   overview    String
   gender      String?
   createdAt   DateTime @default(now())
   updatedAt   DateTime @updatedAt
 
   recentBots      RecentBot[]    @relation("AICharacterRecentBots")
   user        User     @relation("UserAICharacters", fields: [userId], references: [id])
   chatSessions ChatSession[] @relation("CharacterChatSessions")
   messages    Message[] @relation("CharacterMessages")
 
   @@index([userId])
 }

 model DFTcharacter {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?   @db.ObjectId
  name        String
  description String
  overview    String
  avatar      String?
  gender      String?
  category    String?
  by          String?
  

  chatSessions ChatSession[] @relation("DFTSessions")
  messages     Message[]     @relation("DFTMessages")
  recentBots      RecentBot[]    @relation("DFTCharacterRecentBots")
}

 
model ChatSession {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  aiCharacterId String?       @db.ObjectId
  dftCharacterId String?      @db.ObjectId
  startedAt     DateTime      @default(now())
  endedAt       DateTime?

  user          User          @relation("UserChatSessions", fields: [userId], references: [id])
  aiCharacter   AICharacter?  @relation("CharacterChatSessions", fields: [aiCharacterId], references: [id])
  dftCharacter  DFTcharacter? @relation("DFTSessions", fields: [dftCharacterId], references: [id])
  messages      Message[]

  @@index([userId])
  @@index([aiCharacterId])
  @@index([dftCharacterId])
}

 
model Message {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  chatSessionId String        @db.ObjectId
  aiCharacterId String?       @db.ObjectId
  dftCharacterId String?      @db.ObjectId
  sender        Sender
  content       String
  createdAt     DateTime      @default(now())

  user          User          @relation("UserMessages", fields: [userId], references: [id])
  chatSession   ChatSession   @relation(fields: [chatSessionId], references: [id])
  aiCharacter   AICharacter?  @relation("CharacterMessages", fields: [aiCharacterId], references: [id])
  dftCharacter  DFTcharacter? @relation("DFTMessages", fields: [dftCharacterId], references: [id])

  @@index([userId])
  @@index([chatSessionId])
  @@index([aiCharacterId])
  @@index([dftCharacterId])
}

 
 model Persona {
   id              String     @id @default(auto()) @map("_id") @db.ObjectId
   name            String
   description     String
   default         Boolean    @default(false)
 
   userId          String     @db.ObjectId
   user            User       @relation("UserPersonas", fields: [userId], references: [id])

 }

model RecentBot {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  userId         String         @db.ObjectId
  aiCharacterId  String?        @db.ObjectId
  dftCharacterId String?        @db.ObjectId
  viewedAt       DateTime       @default(now())

  user           User           @relation("UserRecentBots", fields: [userId], references: [id])
  aiCharacter    AICharacter?   @relation("AICharacterRecentBots", fields: [aiCharacterId], references: [id])
  dftCharacter   DFTcharacter?  @relation("DFTCharacterRecentBots", fields: [dftCharacterId], references: [id])

  @@index([userId])
  @@index([aiCharacterId])
  @@index([dftCharacterId])
 }

 
 enum Sender {
   USER
   AI
 }